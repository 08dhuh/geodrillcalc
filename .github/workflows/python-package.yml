# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest build
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Build package
      run: |
        python -m build
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/*
        
    - name: Check if release exists
      id: check_release
      run: |
        TAG_NAME=${GITHUB_REF##*/}
        if gh release view $TAG_NAME; then
          echo "Release already exists"
          echo "release_exists=true" >> $GITHUB_ENV
        else
          echo "Release does not exist"
          echo "release_exists=false" >> $GITHUB_ENV
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Create GitHub Release
      if: env.release_exists == 'false'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Changes in this Release:
          - Built with Python 3.11
        draft: false
        prerelease: false
    # - name: Upload Release Asset
    #   if: steps.create_release.outputs.upload_url != ''
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./dist/geodrillcalc-*.whl  
    #     asset_name: geodrillcalc-${{ github.ref_name }}.whl  
    #     asset_content_type: application/zip
    - name: Upload Build Artifacts to Release
      run: |
        gh release upload ${{ github.ref_name }} dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
